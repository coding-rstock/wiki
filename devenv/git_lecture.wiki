# MIT Lecture: Intro to Git
---
<a href="https://www.youtube.com/watch?feature=player_embedded&v=https://www.youtube.com/embed/2sjqTHE0zok?start=49" target="_blank"><img src="http://img.youtube.com/vi/2sjqTHE0zok/0.jpg" alt="IMAGE ALT TEXT HERE" width="240" height="180" border="10" /></a>

***Notes***:

- Why is Git useful?
    - Fix bug fixes while keeping development on other parts active.
    - Allowing multiple people working on same code at same concurrently.
    - When you don’t know exactly when a unit test started to fail, Git can binary test your system through 100’s of revisions and tell you exactly what point that happened.
- **[`5:30`](https://youtu.be/2sjqTHE0zok?t=330)** Learning Git top down starting with its interface isn’t the best way, as it is just an abstract collection of commands.   However Git’s underlying design and ideas are beautiful.  So the best way to learn Git is to study its design (data model) and understand it, versus just memorizing the commands. 
- **[`7:50`](https://youtu.be/2sjqTHE0zok?t=470)** Git’s data model:  Git uses the analogy of a tree (top level) with several branches. The tree is the directory being tracked.  
- **[`10:15`](https://youtu.be/2sjqTHE0zok?t=615)**  Git isn’t linear, it uses a “directed acyclic graph” (DAG) to model history, using snapshots.  Every snapshot has a certain number of parents.  Every snapshot points back to the previous snapshot (parent).  From any given snapshot, you can fork so that you can work on 2 or more different tasks or features in parallel that aren’t related to each other.
- **[`13:11`](https://youtu.be/2sjqTHE0zok?t=791)** When you merge 2 or more branches together, you can introduce errors that weren’t anticipated because the branches could conflict with each other.  These are known as “merge conflicts”.  Git will try to merge them seamlessly with built in tools, and if it can’t, it will return a “merge conflict” error message (example - see later in video @ **[`57:18`](https://youtu.be/2sjqTHE0zok?t=791)**)
- Each snapshot has some metadata attached to it (author, hash, time, etc).  
- **[`15:00`](https://youtu.be/2sjqTHE0zok?t=900)** Git’s data structures:  1) blob - array of bytes.  2)  tree - folder (map of folder name and folder contents), 3) snapshots - commits (parents [array], author [string], message [string], snapshot [tree])
- **[`17:10`](https://youtu.be/2sjqTHE0zok?t=1030)** Git stores data to disk by defining an object (blob or tree or commit).  These objects are “content addressed” by a SHA-1 hash (comprised of 40 hexadecimal characters).  Similar to placing an item on a store shelf with a specific label so that it can be retrieved easily.  Git uses “pointers” to point to these hashes to create the mapping of the tree structure (as a collection of objects - the store).
- **[`22:10`](https://youtu.be/2sjqTHE0zok?t=1330)** Git converts the hashes to human readable content by using “references”.  These are another piece of data that Git maintains internally.  They are a map to a string such as “master”, or “fix bug”.  These references can be revised and moved from one hash to another (even though the tree itself represented by the hashes is immutable so that history can’t be rewritten or lost).
- Basically all there is to a Git repository are these objects and references.
- **[`26:10`](https://youtu.be/2sjqTHE0zok?t=1570)**  Git commands (interactive demo):  
    - `git init`
    - `git status`
    - **[`32:45`](https://youtu.be/2sjqTHE0zok?t=1965)** Git staging area: examples for the need for a staging area.
    - **[`34:50`](https://youtu.be/2sjqTHE0zok?t=2090)** `git log`:  view the tree/version history.  Can add `-- all --graph --decorate` to view it in graphical 2D view.
    - **[`39:50`](https://youtu.be/2sjqTHE0zok?t=2390)** `git checkout`:  move around in your tree/version history.  Changes the contents of your working directory to where it was at the commit you move to (so it can be a dangerous command).  Updates `HEAD` and current branch.
    - **[`43:00`](https://youtu.be/2sjqTHE0zok?t=2580)** `git diff`: shows what has changed since the last snapshot.  By default compares where you currently are in the tree (‘HEAD’ location), but you can compare other snapshots by using `git diff <revision> <filename>`

- **[`47:05`](https://youtu.be/2sjqTHE0zok?t=2825)** Branching and merging (sample program)
    - **[`49:43`](https://youtu.be/2sjqTHE0zok?t=2983)** `git branch`: watch demo of how instructor creates “cat” and “dog” functionality to his “animal.py” program, creating new branches for each.
    - **[`55:45`](https://youtu.be/2sjqTHE0zok?t=3345)** `git merge`: watch demo.  Note:  Git has a “fast-forward” feature.  Merge conflicts can happen.  Use `git mergetool` command to solve (need to set up `vimdiff` so that it’s run when “git mergetool” is run).  Tool displays conflict markers as text strings `>>>>>>>` and `=========` in the text editor  to indicate where the lines of code that are conflicting are.
- **[`62:05`](https://youtu.be/2sjqTHE0zok?t=3725)** Git Remotes:  how you collaborate with other people using Git.  Your Git repository contains the entire history of snapshots of your project.  
    - `git remote`: command that lists all the remote clones of your repo (say on GitHub or GitLab), that it is aware of.
    - `Git remote add <name> <url>` adds another repo to the project.  Usually name is `origin`.
- **[`65:07`](https://youtu.be/2sjqTHE0zok?t=3907)** `git push`: sends changes from your local repo to the remote repo.  
    - **[`66:47`](https://youtu.be/2sjqTHE0zok?t=4007)** See demo on how changes are sync’d between the local and remote repo, as the “git log” display gets a little complicated as changes are made.  Instructor simulates a remote repo on his local machine by cloning the repo to ‘demo2’.  Then uses push/fetch commands to sync.  
- `git fetch`:  Because Git operates locally without the internet, you need to tell Git to fetch the push because it doesn’t know the remote repo has changed.
- **[`74:04`](https://youtu.be/2sjqTHE0zok?t=4444)** Overview of other Git functionality
    - `git config`:  Git is highly configurable.  You can issue git config commands, or edit the .gitconfig file using a text editor.  
    - `git clone`:  for very large repo’s, you can use option “--shallow” to just get the latest snapshot instead of all the 1000’s of snapshots.
    - `Git add -p <filename>`:  Allows you to select “hunks” of code within a file to only commit certain parts of your code within that file, not all of it.
    - `git blame`: find out who edited what line of a file
    - `git stash`:  revert working directory to state it was in at last commit
    - `git stash pop`: undoes git stash
    - `git bisect`: say you are 1000’s of commits in on a big project but now a unit test is failing all of a sudden.  This command automates a binary search of all commits to try and locate the first commit where it started to fail (and you can even pass it a script to be more detailed in its search).
    - `git ignore`:  ignore certain files in your repo that you don’t want in your working project.  
    - Shell integrations (zsh, bash): have `git status` as part of your shell
    - Editor integrations: ex: there are Vim plugins specifically designed for Git. 
